### Problem 12
###-------------------------------------------------------------------------------------------------------------------------------------------------
### The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
### The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
### Let us list the factors of the first seven triangle numbers:
### 1: 1
### 3: 1,3
### 6: 1,2,3,6
### 10: 1,2,5,10
### 15: 1,3,5,15
### 21: 1,3,7,21
### 28: 1,2,4,7,14,28
### We can see that 28 is the first triangle number to have over five divisors.
### What is the value of the first triangle number to have over five hundred divisors?

### Solution

import numpy as np

# Function to calculate triangle number
def triangleNumber(n):
	triangleNumber = 0

	for i in range(1, n+1):
		triangleNumber += i

	return triangleNumber

# Function to determine the number of divisors
def numOfDivisors(n):
	divisors = 0
	perfectSquare = False

	for i in range(1, int(np.sqrt(n)) + 1):
		if i**2 == n:
			perfectSquare = True
		if n % i == 0:
			divisors += 1

	if perfectSquare:
		return 2*divisors - 1
	else:
		return 2*divisors

counter = 1

while True:
	triNum = triangleNumber(counter)

	if numOfDivisors(triNum) > 500.0:
		break

	counter += 1

print('Triangle number: ' + str(triNum))
